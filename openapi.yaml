openapi: 3.0.0
info:
  title: goBooked
  description: >-

  version: 1.0.0
servers:
  - url: https://130.162.195.228/mhs714220022/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /login:
    post:
      tags:
        - Users
      summary: Post Login
      description: >-
        This is a POST request, submitting data to an API via the request body.
        This request submits JSON data, and the data is reflected in the
        response.


        A successful POST request typically returns a `200 OK` or `201 Created`
        response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: Ky
                password: admin12345
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /regis:
    post:
      tags:
        - Users
      summary: Post Regis
      description: >-
        This is a POST request, submitting data to an API via the request body.
        This request submits JSON data, and the data is reflected in the
        response.


        A successful POST request typically returns a `200 OK` or `201 Created`
        response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: Kyce
                email: rifky@gmail.com
                password: '123'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /motors:
    get:
      tags:
        - Motor
      summary: Get Motors
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Motor
      summary: Post Motors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nama_motor: SUZ
                plat: B 6342 JS
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /motors/{MotorId}:
    put:
      tags:
        - Motor
      summary: Update Motors
      description: >-
        This is a PUT request and it is used to overwrite an existing piece of
        data. For instance, after you create an entity with a POST request, you
        may want to modify that later. You can do that using a PUT request. You
        typically identify the entity being updated by including an identifier
        in the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or
        `204 No Content` response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nama_motor: SUZUKI
                plat: B 6666 JS
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: MotorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Motor
      summary: Delete Motors
      description: >-
        This is a DELETE request, and it is used to delete data that was
        previously created via a POST request. You typically identify the entity
        being updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202
        Accepted`, or `204 No Content` response code.
      security:
        - bearerAuth: []
      parameters:
        - name: MotorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /bookeds:
    get:
      tags:
        - Booked
      summary: Get Booked
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Booked
      summary: Post Booked
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                motor_id: 4
                nama: Conu
                alamat: Goth
                harga: Rp. 400.000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /bookeds/{BookedId}:
    put:
      tags:
        - Booked
      summary: Update Booked
      description: >-
        This is a PUT request and it is used to overwrite an existing piece of
        data. For instance, after you create an entity with a POST request, you
        may want to modify that later. You can do that using a PUT request. You
        typically identify the entity being updated by including an identifier
        in the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or
        `204 No Content` response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                motor_id: 4
                nama: Conu
                alamat: Goth
                harga: Rp. 400.000
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: BookedId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Booked
      summary: Delete Booked
      description: >-
        This is a DELETE request, and it is used to delete data that was
        previously created via a POST request. You typically identify the entity
        being updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202
        Accepted`, or `204 No Content` response code.
      security:
        - bearerAuth: []
      parameters:
        - name: BookedId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
